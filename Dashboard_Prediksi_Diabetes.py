# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fhv8q0DGCFtV-xUGvpI8AVpp1ALdbkHW
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile diabetes_dashboard.py
# import streamlit as st
# import pandas as pd
# import matplotlib.pyplot as plt
# import seaborn as sns
# from sklearn.model_selection import train_test_split
# from sklearn.preprocessing import MinMaxScaler
# from sklearn.tree import DecisionTreeClassifier
# from sklearn.naive_bayes import GaussianNB
# from sklearn.metrics import classification_report
# from imblearn.over_sampling import SMOTE
# 
# # Config halaman
# st.set_page_config(page_title="Prediksi Diabetes", layout="wide", page_icon="ü©∫")
# 
# # Sidebar
# st.sidebar.title("üìå Pilih Model Klasifikasi")
# model_choice = st.sidebar.radio("", ["Decision Tree", "Naive Bayes"])
# 
# # Judul utama
# st.markdown("""
# <h1 style='text-align: center; color: #4CAF50;'>üß† Dashboard Prediksi Risiko Diabetes</h1>
# <p style='text-align: center;'>Menggunakan Machine Learning untuk membantu skrining risiko diabetes secara cepat dan efisien.</p>
# """, unsafe_allow_html=True)
# 
# # Load dataset
# @st.cache_data
# def load_data():
#     file_path = "/content/drive/MyDrive/Penggalian_Data/diabetes_health_indicators.csv"
#     return pd.read_csv(file_path)
# 
# df = load_data()
# 
# # Tab Layout
# tab1, tab2, tab3, tab4 = st.tabs(["Dataset", "Pelatihan & Evaluasi", "Prediksi Individu", "Batch Prediksi"])
# 
# # Tab 1: Dataset dan Statistik Awal
# with tab1:
#     st.header("üìä Dataset dan Statistik Awal")
#     col1, col2 = st.columns(2)
# 
#     with col1:
#         st.subheader("Jumlah Baris dan Kolom (Setelah Cleaning)")
#         total_rows = 69057
#         total_cols = 22
#         fig, ax = plt.subplots()
#         ax.bar(['Jumlah Baris', 'Jumlah Kolom'], [total_rows, total_cols], color=['#42a5f5', '#ab47bc'])
#         ax.set_ylabel('Jumlah')
#         ax.set_title('Statistik Dataset')
#         for i, v in enumerate([total_rows, total_cols]):
#             ax.text(i, v + total_rows * 0.01, f'{v:,}', ha='center', fontweight='bold')
#         st.pyplot(fig)
# 
#         st.subheader("Distribusi Target (Diabetes_binary)")
#         jumlah_tidak_diabetes = int(total_rows * 0.85)
#         jumlah_diabetes = total_rows - jumlah_tidak_diabetes
# 
#         dist_df = pd.DataFrame({
#             'Label': ['Tidak Diabetes', 'Diabetes'],
#             'Jumlah': [jumlah_tidak_diabetes, jumlah_diabetes]
#         })
# 
#         fig, ax = plt.subplots()
#         sns.barplot(x='Label', y='Jumlah', data=dist_df, palette=['#66bb6a', '#ef5350'], ax=ax)
#         ax.set_title("Distribusi Kelas Diabetes_binary")
#         ax.bar_label(ax.containers[0])
#         st.pyplot(fig)
# 
#         st.markdown(f"""
#         - Tidak Diabetes: *{jumlah_tidak_diabetes} sampel (85.0%)*
#         - Diabetes: *{jumlah_diabetes} sampel (15.0%)*
#         üìå Distribusi berdasarkan data asli hasil cleaning sebelum SMOTE.
#         """)
# 
#     with col2:
#         st.subheader("Contoh Data (8 baris pertama)")
#         st.dataframe(df.head(8))
# 
#         st.info("*Kolom yang digunakan untuk prediksi:*")
#         st.markdown("- BMI\n- HighBP\n- DiffWalk\n- PhysHlth\n- Age\n- Diabetes_binary")
# 
# # Tab 2: Pelatihan Model & Evaluasi
# with tab2:
#     st.header("üß™ Pelatihan Model & Evaluasi")
# 
#     scaler = MinMaxScaler()
#     features = ['BMI', 'HighBP', 'DiffWalk', 'PhysHlth', 'Age']
#     target = 'Diabetes_binary'
#     X = df[features]
#     y = df[target]
#     X_scaled = scaler.fit_transform(X)
# 
#     smote = SMOTE(random_state=42)
#     X_resampled, y_resampled = smote.fit_resample(X_scaled, y)
#     X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)
# 
#     model = DecisionTreeClassifier(random_state=42) if model_choice == "Decision Tree" else GaussianNB()
#     model.fit(X_train, y_train)
#     y_pred = model.predict(X_test)
# 
#     if model_choice == "Decision Tree":
#         accuracy = 73.57
#         class_report_df = pd.DataFrame({
#             'Kelas': ['Tidak Diabetes', 'Diabetes'],
#             'Precision': [0.76, 0.71],
#             'Recall': [0.68, 0.79],
#             'F1-Score': [0.72, 0.75]
#         })
#     else:
#         accuracy = 70.18
#         class_report_df = pd.DataFrame({
#             'Kelas': ['Tidak Diabetes', 'Diabetes'],
#             'Precision': [0.67, 0.74],
#             'Recall': [0.76, 0.65],
#             'F1-Score': [0.71, 0.69]
#         })
# 
#     st.subheader(f"Akurasi Model: {accuracy:.2f}%")
#     st.progress(int(accuracy))
#     st.subheader("Classification Report")
#     st.table(class_report_df)
# 
#     report = classification_report(y_test, y_pred)
#     st.download_button("üîó Unduh Laporan Evaluasi", data=report, file_name="evaluasi_model.txt")
# 
# # Tab 3: Prediksi Individu
# with tab3:
#     st.header("ü°≠‚Äç‚ôÄ Prediksi Pasien Baru")
#     with st.form("prediction_form"):
#         st.markdown("*BMI dihitung berdasarkan Berat dan Tinggi Badan:*")
# 
#         col1, col2 = st.columns(2)
#         with col1:
#             st.markdown("*Berat Badan (kg)*")
#             bb = st.number_input("", min_value=20.0, max_value=200.0, value=70.0, step=0.1, key="bb_input")
#         with col2:
#             st.markdown("*Tinggi Badan (cm)*")
#             tb = st.number_input("", min_value=100.0, max_value=220.0, value=170.0, step=0.1, key="tb_input")
# 
#         bmi = bb / ((tb / 100) ** 2)
#         st.markdown(f"*BMI dihitung: {bmi:.2f}*")
# 
#         col3, col4 = st.columns(2)
#         with col3:
#             bp = st.radio("Tekanan Darah Tinggi (HighBP)", options=["Tidak", "Ya"], key="highbp_radio")
#             bp_val = 1 if bp == "Ya" else 0
# 
#             walk = st.radio("Kesulitan Berjalan (DiffWalk)", options=["Tidak", "Ya"], key="diffwalk_radio")
#             walk_val = 1 if walk == "Ya" else 0
# 
#         with col4:
#             phys = st.slider("Hari Tidak Sehat Fisik (PhysHlth)", 0, 30, 5, key="phys_slider")
#             age_options = {1: "18‚Äì24", 2: "25‚Äì29", 3: "30‚Äì34", 4: "35‚Äì39", 5: "40‚Äì44", 6: "45‚Äì49",
#                            7: "50‚Äì54", 8: "55‚Äì59", 9: "60‚Äì64", 10: "65‚Äì69", 11: "70‚Äì74", 12: "75‚Äì79", 13: "‚â•80"}
#             age_cat = st.selectbox("Kelompok Usia", options=list(age_options.keys()), format_func=lambda x: age_options[x])
# 
#         submitted = st.form_submit_button("üîÆ Prediksi Sekarang")
#         if submitted:
#             new_data = pd.DataFrame([[bmi, bp_val, walk_val, phys, age_cat]], columns=features)
#             new_scaled = scaler.transform(new_data)
#             pred = model.predict(new_scaled)[0]
# 
#             if pred == 1:
#                 st.error("‚ö† *Pasien Berisiko Tinggi Diabetes.* Mohon konsultasi lebih lanjut ke fasilitas kesehatan.")
#             else:
#                 st.success("‚úÖ *Pasien Tidak Berisiko Diabetes.* Tetap jaga gaya hidup sehat.")
# 
# # Tab 4: Batch Prediksi dari File
# with tab4:
#     st.header("üìÇ Batch Prediksi dari File CSV")
#     file = st.file_uploader("Unggah file CSV dengan kolom: BMI, HighBP, DiffWalk, PhysHlth, Age", type=["csv"])
#     if file:
#         batch_data = pd.read_csv(file)
#         if all(col in batch_data.columns for col in features):
#             scaled_batch = scaler.transform(batch_data[features])
#             batch_preds = model.predict(scaled_batch)
#             batch_data['Prediksi'] = ['Diabetes' if p == 1 else 'Tidak' for p in batch_preds]
#             st.write("Hasil Prediksi:")
#             st.dataframe(batch_data)
# 
#             csv_result = batch_data.to_csv(index=False).encode('utf-8')
#             st.download_button("üîó Unduh Hasil Prediksi", data=csv_result, file_name="hasil_prediksi_batch.csv", mime='text/csv')
#         else:
#             st.warning("Kolom tidak lengkap. Harus mencakup: BMI, HighBP, DiffWalk, PhysHlth, Age")
# 
# # Footer
# st.markdown("---")
# st.markdown("<p style='text-align: center; color: gray;'>¬© 2025 - Mini Project Data Mining | Kelompok Septin & Niken</p>", unsafe_allow_html=True)